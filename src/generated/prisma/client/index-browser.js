
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  email: 'email',
  name: 'name',
  phone: 'phone',
  address: 'address',
  passwordHash: 'passwordHash',
  role: 'role',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  adminId: 'adminId',
  userId: 'userId'
};

exports.Prisma.CustomerScalarFieldEnum = {
  customerId: 'customerId',
  userId: 'userId'
};

exports.Prisma.OtpScalarFieldEnum = {
  otpId: 'otpId',
  phone: 'phone',
  otpHash: 'otpHash',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.FarmerScalarFieldEnum = {
  farmerId: 'farmerId',
  name: 'name',
  farmName: 'farmName',
  address: 'address',
  contactInfo: 'contactInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  categoryId: 'categoryId',
  name: 'name',
  imageUrl: 'imageUrl',
  isPrivateImage: 'isPrivateImage',
  description: 'description'
};

exports.Prisma.ProductScalarFieldEnum = {
  productId: 'productId',
  name: 'name',
  description: 'description',
  unitType: 'unitType',
  unitPrice: 'unitPrice',
  packageSize: 'packageSize',
  stockQuantity: 'stockQuantity',
  reorderLevel: 'reorderLevel',
  isSubscription: 'isSubscription',
  isPreorder: 'isPreorder',
  isPrivateImages: 'isPrivateImages',
  preorderAvailabilityDate: 'preorderAvailabilityDate',
  imageUrls: 'imageUrls',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId',
  farmerId: 'farmerId',
  dealId: 'dealId'
};

exports.Prisma.InventoryPurchaseScalarFieldEnum = {
  purchaseId: 'purchaseId',
  quantity: 'quantity',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  packageSize: 'packageSize',
  purchaseDate: 'purchaseDate',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  farmerId: 'farmerId',
  productId: 'productId'
};

exports.Prisma.FarmerTransactionScalarFieldEnum = {
  transactionId: 'transactionId',
  amountDue: 'amountDue',
  amountPaid: 'amountPaid',
  balance: 'balance',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  farmerId: 'farmerId',
  purchaseId: 'purchaseId'
};

exports.Prisma.FarmerPaymentScalarFieldEnum = {
  paymentId: 'paymentId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  paymentDate: 'paymentDate',
  notes: 'notes',
  createdAt: 'createdAt',
  transactionId: 'transactionId',
  farmerFarmerId: 'farmerFarmerId'
};

exports.Prisma.StockTransactionScalarFieldEnum = {
  transactionId: 'transactionId',
  quantity: 'quantity',
  transactionType: 'transactionType',
  purchaseId: 'purchaseId',
  orderId: 'orderId',
  description: 'description',
  createdAt: 'createdAt',
  productId: 'productId'
};

exports.Prisma.WalletScalarFieldEnum = {
  walletId: 'walletId',
  balance: 'balance',
  lockedBalance: 'lockedBalance',
  updatedAt: 'updatedAt',
  customerId: 'customerId'
};

exports.Prisma.WalletTransactionScalarFieldEnum = {
  transactionId: 'transactionId',
  amount: 'amount',
  transactionType: 'transactionType',
  transactionStatus: 'transactionStatus',
  description: 'description',
  createdAt: 'createdAt',
  walletId: 'walletId',
  orderId: 'orderId'
};

exports.Prisma.OrderScalarFieldEnum = {
  orderId: 'orderId',
  orderDate: 'orderDate',
  status: 'status',
  totalAmount: 'totalAmount',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  shippingAddress: 'shippingAddress',
  isSubscription: 'isSubscription',
  isPreorder: 'isPreorder',
  preorderDeliveryDate: 'preorderDeliveryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  orderItemId: 'orderItemId',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  packageSize: 'packageSize',
  unitType: 'unitType',
  subtotal: 'subtotal',
  orderId: 'orderId',
  productId: 'productId'
};

exports.Prisma.OrderTrackingScalarFieldEnum = {
  trackingId: 'trackingId',
  status: 'status',
  updateDate: 'updateDate',
  description: 'description',
  createdAt: 'createdAt',
  orderId: 'orderId'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  subscriptionId: 'subscriptionId',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  paymentMethod: 'paymentMethod',
  isProcessing: 'isProcessing',
  planPrice: 'planPrice',
  shippingAddress: 'shippingAddress',
  renewalDate: 'renewalDate',
  nextDeliveryDate: 'nextDeliveryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerId: 'customerId',
  planId: 'planId'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  planId: 'planId',
  name: 'name',
  frequency: 'frequency',
  price: 'price',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  productId: 'productId'
};

exports.Prisma.SubscriptionDeliveryScalarFieldEnum = {
  deliveryId: 'deliveryId',
  deliveryDate: 'deliveryDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  subscriptionId: 'subscriptionId',
  orderId: 'orderId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  paymentId: 'paymentId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  transactionId: 'transactionId',
  createdAt: 'createdAt',
  orderId: 'orderId',
  walletTransactionId: 'walletTransactionId'
};

exports.Prisma.MessageScalarFieldEnum = {
  messageId: 'messageId',
  message: 'message',
  status: 'status',
  readAt: 'readAt',
  createdAt: 'createdAt',
  senderId: 'senderId',
  receiverId: 'receiverId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  notificationId: 'notificationId',
  message: 'message',
  status: 'status',
  type: 'type',
  isSeen: 'isSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  receiverId: 'receiverId'
};

exports.Prisma.PromotionScalarFieldEnum = {
  promotionId: 'promotionId',
  title: 'title',
  description: 'description',
  imageUrl: 'imageUrl',
  targetType: 'targetType',
  productId: 'productId',
  priority: 'priority',
  placement: 'placement',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DealScalarFieldEnum = {
  dealId: 'dealId',
  title: 'title',
  description: 'description',
  discountType: 'discountType',
  discountValue: 'discountValue',
  startDate: 'startDate',
  endDate: 'endDate',
  isGlobal: 'isGlobal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN',
  CUSTOMER: 'CUSTOMER',
  SUPPORT: 'SUPPORT'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PENDING: 'PENDING'
};

exports.ProductUnitType = exports.$Enums.ProductUnitType = {
  KG: 'KG',
  GM: 'GM',
  L: 'L',
  ML: 'ML',
  PCS: 'PCS',
  PACK: 'PACK',
  BUNDLE: 'BUNDLE',
  DOZEN: 'DOZEN'
};

exports.InventoryPurchaseStatus = exports.$Enums.InventoryPurchaseStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  LOCKED: 'LOCKED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  IN: 'IN',
  OUT: 'OUT',
  ADJUSTMENT: 'ADJUSTMENT'
};

exports.WalletTransactionType = exports.$Enums.WalletTransactionType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  PURCHASE: 'PURCHASE',
  REFUND: 'REFUND'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  CONFIRMED: 'CONFIRMED'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  PENDING: 'PENDING'
};

exports.SubscriptionPlanType = exports.$Enums.SubscriptionPlanType = {
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY'
};

exports.MessageStatus = exports.$Enums.MessageStatus = {
  READ: 'READ',
  UNREAD: 'UNREAD'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  READ: 'READ',
  UNREAD: 'UNREAD'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ORDER: 'ORDER',
  PAYMENT: 'PAYMENT',
  WALLET: 'WALLET',
  SUBSCRIPTION: 'SUBSCRIPTION',
  INVENTORY: 'INVENTORY',
  PROMOTION: 'PROMOTION',
  SYSTEM_ALERT: 'SYSTEM_ALERT',
  REFUND: 'REFUND'
};

exports.PromoTargetType = exports.$Enums.PromoTargetType = {
  PRODUCT: 'PRODUCT',
  SUBSCRIPTION_PLAN: 'SUBSCRIPTION_PLAN',
  PREORDER: 'PREORDER',
  DEAL: 'DEAL',
  OFFER: 'OFFER'
};

exports.PromoPlacement = exports.$Enums.PromoPlacement = {
  HOME_TOP: 'HOME_TOP',
  HOME_BOTTOM: 'HOME_BOTTOM',
  HOME_MIDDLE: 'HOME_MIDDLE'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  FLAT: 'FLAT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Admin: 'Admin',
  Customer: 'Customer',
  Otp: 'Otp',
  Farmer: 'Farmer',
  Category: 'Category',
  Product: 'Product',
  InventoryPurchase: 'InventoryPurchase',
  FarmerTransaction: 'FarmerTransaction',
  FarmerPayment: 'FarmerPayment',
  StockTransaction: 'StockTransaction',
  Wallet: 'Wallet',
  WalletTransaction: 'WalletTransaction',
  Order: 'Order',
  OrderItem: 'OrderItem',
  OrderTracking: 'OrderTracking',
  Subscription: 'Subscription',
  SubscriptionPlan: 'SubscriptionPlan',
  SubscriptionDelivery: 'SubscriptionDelivery',
  Payment: 'Payment',
  Message: 'Message',
  Notification: 'Notification',
  Promotion: 'Promotion',
  Deal: 'Deal'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
